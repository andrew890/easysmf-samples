import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import static java.util.Comparator.comparing;

import com.blackhillsoftware.smf.SmfRecord;
import com.blackhillsoftware.smf.SmfRecordReader;
import com.blackhillsoftware.smf.smf30.*;

/**
 * 
 *
 */

public class sample5 
{
    public static void main(String[] args) throws IOException                                   
    {                                       
    	Set<JobStepDD> jobStepDDs = new HashSet<JobStepDD>();
    	
        // If we received no arguments, open DD INPUT
        // otherwise use the first argument as the file 
        // name to read.
    	
        try (SmfRecordReader reader = 
                args.length == 0 ?
                        SmfRecordReader.fromDD("INPUT") :
                        SmfRecordReader.fromName(args[0])) 
        {
        	reader.include(30,4); // SMF type 30 subtype 4 : Step End records
        	
        	// read and process records
        	for (SmfRecord record : reader)
        	{
        		// create a type 30 record 
        		Smf30Record r30 = Smf30Record.from(record);
        		
        		for (ExcpSection excp : r30.excpSections())
        		{
        			if (excp.smf30ddn().equals("STEPLIB"))
        			{
        				jobStepDDs.add(new JobStepDD(r30, excp));	
        			}
        		}
        	}                                                                           
        }
        
        jobStepDDs.stream()
        	.sorted(
        			comparing(JobStepDD::getJobName)
        			.thenComparing(JobStepDD::getStepNumber)
					.thenComparing(JobStepDD::getStepName)
					.thenComparing(JobStepDD::getProgramName))
        	.forEachOrdered(action);
        
        
        System.out.println("Done");
    }
    
    private static class JobStepDD
    {	        
        private String jobname;
        private int stepnumber;
        private String stepname;
        private String programname;        
        private String ddname;
    	
		public JobStepDD(Smf30Record r30, ExcpSection excpSection)
        {
        	jobname = r30.identificationSection().smf30jbn();
        	stepname = r30.identificationSection().smf30stm();
        	programname = r30.identificationSection().smf30pgm();
        	stepnumber = r30.identificationSection().smf30stn();
        	ddname = excpSection.smf30ddn();
        }

		// hashCode and equals code generated by Eclipse.
		@Override
		public int hashCode() {
			return Objects.hash(ddname, jobname, programname, stepname, stepnumber);
		}
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			JobStepDD other = (JobStepDD) obj;
			return Objects.equals(ddname, other.ddname) 
					&& Objects.equals(jobname, other.jobname)
					&& Objects.equals(programname, other.programname) 
					&& Objects.equals(stepname, other.stepname)
					&& stepnumber == other.stepnumber;
		}

		String getJobName() {
			return jobname;
		}

		int getStepNumber() {
			return stepnumber;
		}

		String getStepName() {
			return stepname;
		}

		String getProgramName() {
			return programname;
		}

		String getDDName() {
			return ddname;
		}

    }  
}
